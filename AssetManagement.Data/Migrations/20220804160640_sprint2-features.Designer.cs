// <auto-generated />
using System;
using AssetManagement.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AssetManagement.Data.Migrations
{
    [DbContext(typeof(AssetManagementDbContext))]
    [Migration("20220804160640_sprint2-features")]
    partial class sprint2features
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("AssetManagement.Domain.Model.Asset", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CategoryID")
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("History")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("InstalledDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("LocationID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Specification")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StateID")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CategoryID");

                    b.HasIndex("LocationID");

                    b.HasIndex("StateID");

                    b.ToTable("Assets");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryID = 1,
                            Code = "LA000001",
                            CreatedDate = new DateTime(2022, 8, 4, 23, 6, 39, 31, DateTimeKind.Local).AddTicks(4584),
                            InstalledDate = new DateTime(2022, 8, 4, 23, 6, 39, 31, DateTimeKind.Local).AddTicks(4565),
                            LocationID = 1,
                            Name = "Laptop HP Probook 450 G1",
                            Specification = "Dummy Spec 1",
                            StateID = 2,
                            UpdatedDate = new DateTime(2022, 8, 4, 23, 6, 39, 31, DateTimeKind.Local).AddTicks(4585)
                        },
                        new
                        {
                            Id = 2,
                            CategoryID = 1,
                            Code = "MO000001",
                            CreatedDate = new DateTime(2022, 8, 4, 23, 6, 39, 31, DateTimeKind.Local).AddTicks(4592),
                            InstalledDate = new DateTime(2022, 8, 4, 23, 6, 39, 31, DateTimeKind.Local).AddTicks(4589),
                            LocationID = 2,
                            Name = "Moninor Dell UltraSharp",
                            Specification = "Dummy Spec 2",
                            StateID = 2,
                            UpdatedDate = new DateTime(2022, 8, 4, 23, 6, 39, 31, DateTimeKind.Local).AddTicks(4593)
                        },
                        new
                        {
                            Id = 3,
                            CategoryID = 1,
                            Code = "PC000001",
                            CreatedDate = new DateTime(2022, 8, 4, 23, 6, 39, 31, DateTimeKind.Local).AddTicks(4598),
                            InstalledDate = new DateTime(2022, 8, 4, 23, 6, 39, 31, DateTimeKind.Local).AddTicks(4596),
                            LocationID = 3,
                            Name = "Personal Computer",
                            Specification = "Dummy Spec 3",
                            StateID = 2,
                            UpdatedDate = new DateTime(2022, 8, 4, 23, 6, 39, 31, DateTimeKind.Local).AddTicks(4599)
                        },
                        new
                        {
                            Id = 4,
                            CategoryID = 1,
                            Code = "LA000002",
                            CreatedDate = new DateTime(2022, 8, 4, 23, 6, 39, 31, DateTimeKind.Local).AddTicks(4605),
                            InstalledDate = new DateTime(2022, 8, 4, 23, 6, 39, 31, DateTimeKind.Local).AddTicks(4602),
                            LocationID = 1,
                            Name = "Laptop HP Probook 450 G1",
                            Specification = "Dummy Spec 4",
                            StateID = 2,
                            UpdatedDate = new DateTime(2022, 8, 4, 23, 6, 39, 31, DateTimeKind.Local).AddTicks(4606)
                        },
                        new
                        {
                            Id = 5,
                            CategoryID = 1,
                            Code = "MO000002",
                            CreatedDate = new DateTime(2022, 8, 4, 23, 6, 39, 31, DateTimeKind.Local).AddTicks(4611),
                            InstalledDate = new DateTime(2022, 8, 4, 23, 6, 39, 31, DateTimeKind.Local).AddTicks(4608),
                            LocationID = 2,
                            Name = "Moninor Dell UltraSharp",
                            Specification = "Dummy Spec 5",
                            StateID = 2,
                            UpdatedDate = new DateTime(2022, 8, 4, 23, 6, 39, 31, DateTimeKind.Local).AddTicks(4612)
                        },
                        new
                        {
                            Id = 6,
                            CategoryID = 1,
                            Code = "PC000002",
                            CreatedDate = new DateTime(2022, 8, 4, 23, 6, 39, 31, DateTimeKind.Local).AddTicks(4617),
                            InstalledDate = new DateTime(2022, 8, 4, 23, 6, 39, 31, DateTimeKind.Local).AddTicks(4615),
                            LocationID = 3,
                            Name = "Personal Computer",
                            Specification = "Dummy Spec 6",
                            StateID = 2,
                            UpdatedDate = new DateTime(2022, 8, 4, 23, 6, 39, 31, DateTimeKind.Local).AddTicks(4618)
                        },
                        new
                        {
                            Id = 7,
                            CategoryID = 1,
                            Code = "LA000003",
                            CreatedDate = new DateTime(2022, 8, 4, 23, 6, 39, 31, DateTimeKind.Local).AddTicks(4623),
                            InstalledDate = new DateTime(2022, 8, 4, 23, 6, 39, 31, DateTimeKind.Local).AddTicks(4621),
                            LocationID = 1,
                            Name = "Laptop HP Probook 450 G1",
                            Specification = "Dummy Spec 7",
                            StateID = 2,
                            UpdatedDate = new DateTime(2022, 8, 4, 23, 6, 39, 31, DateTimeKind.Local).AddTicks(4624)
                        },
                        new
                        {
                            Id = 8,
                            CategoryID = 1,
                            Code = "MO000003",
                            CreatedDate = new DateTime(2022, 8, 4, 23, 6, 39, 31, DateTimeKind.Local).AddTicks(4629),
                            InstalledDate = new DateTime(2022, 8, 4, 23, 6, 39, 31, DateTimeKind.Local).AddTicks(4627),
                            LocationID = 2,
                            Name = "Moninor Dell UltraSharp",
                            Specification = "Dummy Spec 8",
                            StateID = 2,
                            UpdatedDate = new DateTime(2022, 8, 4, 23, 6, 39, 31, DateTimeKind.Local).AddTicks(4630)
                        },
                        new
                        {
                            Id = 9,
                            CategoryID = 1,
                            Code = "PC000003",
                            CreatedDate = new DateTime(2022, 8, 4, 23, 6, 39, 31, DateTimeKind.Local).AddTicks(4635),
                            InstalledDate = new DateTime(2022, 8, 4, 23, 6, 39, 31, DateTimeKind.Local).AddTicks(4633),
                            LocationID = 3,
                            Name = "Personal Computer",
                            Specification = "Dummy Spec 9",
                            StateID = 2,
                            UpdatedDate = new DateTime(2022, 8, 4, 23, 6, 39, 31, DateTimeKind.Local).AddTicks(4637)
                        },
                        new
                        {
                            Id = 10,
                            CategoryID = 1,
                            Code = "LA000004",
                            CreatedDate = new DateTime(2022, 8, 4, 23, 6, 39, 31, DateTimeKind.Local).AddTicks(4642),
                            InstalledDate = new DateTime(2022, 8, 4, 23, 6, 39, 31, DateTimeKind.Local).AddTicks(4640),
                            LocationID = 1,
                            Name = "Laptop HP Probook 450 G1",
                            Specification = "Dummy Spec 10",
                            StateID = 2,
                            UpdatedDate = new DateTime(2022, 8, 4, 23, 6, 39, 31, DateTimeKind.Local).AddTicks(4643)
                        },
                        new
                        {
                            Id = 11,
                            CategoryID = 1,
                            Code = "MO000004",
                            CreatedDate = new DateTime(2022, 8, 4, 23, 6, 39, 31, DateTimeKind.Local).AddTicks(4648),
                            InstalledDate = new DateTime(2022, 8, 4, 23, 6, 39, 31, DateTimeKind.Local).AddTicks(4646),
                            LocationID = 2,
                            Name = "Moninor Dell UltraSharp",
                            Specification = "Dummy Spec 11",
                            StateID = 2,
                            UpdatedDate = new DateTime(2022, 8, 4, 23, 6, 39, 31, DateTimeKind.Local).AddTicks(4649)
                        },
                        new
                        {
                            Id = 12,
                            CategoryID = 1,
                            Code = "PC000004",
                            CreatedDate = new DateTime(2022, 8, 4, 23, 6, 39, 31, DateTimeKind.Local).AddTicks(4654),
                            InstalledDate = new DateTime(2022, 8, 4, 23, 6, 39, 31, DateTimeKind.Local).AddTicks(4652),
                            LocationID = 3,
                            Name = "Personal Computer",
                            Specification = "Dummy Spec 12",
                            StateID = 2,
                            UpdatedDate = new DateTime(2022, 8, 4, 23, 6, 39, 31, DateTimeKind.Local).AddTicks(4655)
                        });
                });

            modelBuilder.Entity("AssetManagement.Domain.Model.Assignment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AssetCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AssetId")
                        .HasColumnType("int");

                    b.Property<string>("AssetName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AssignBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("AssignDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("AssignTo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AssignmentState")
                        .HasColumnType("int");

                    b.Property<string>("StaffCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AssetId");

                    b.HasIndex("UserId");

                    b.ToTable("Assignments", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AssetCode = "LA000001",
                            AssetId = 1,
                            AssetName = "Laptop HP Probook 450 G1",
                            AssignBy = "adminhcm",
                            AssignDate = new DateTime(2022, 8, 4, 23, 6, 39, 31, DateTimeKind.Local).AddTicks(5002),
                            AssignTo = "admindn",
                            AssignmentState = 1,
                            StaffCode = "SD0002",
                            UserId = 2
                        },
                        new
                        {
                            Id = 2,
                            AssetCode = "LA000001",
                            AssetId = 1,
                            AssetName = "Laptop HP Probook 450 G1",
                            AssignBy = "adminhcm",
                            AssignDate = new DateTime(2022, 8, 4, 23, 6, 39, 31, DateTimeKind.Local).AddTicks(5006),
                            AssignTo = "adminhn",
                            AssignmentState = 2,
                            StaffCode = "SD0003",
                            UserId = 3
                        },
                        new
                        {
                            Id = 3,
                            AssetCode = "LA000001",
                            AssetId = 1,
                            AssetName = "Laptop HP Probook 450 G1",
                            AssignBy = "adminhcm",
                            AssignDate = new DateTime(2022, 8, 4, 23, 6, 39, 31, DateTimeKind.Local).AddTicks(5010),
                            AssignTo = "vinhbx",
                            AssignmentState = 1,
                            StaffCode = "SD0003",
                            UserId = 4
                        });
                });

            modelBuilder.Entity("AssetManagement.Domain.Model.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Prefix")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Category", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Laptop",
                            Prefix = "LA",
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Monitor",
                            Prefix = "MO",
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Personal Computer",
                            Prefix = "PC",
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("AssetManagement.Domain.Model.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("LocationName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Locations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            LocationName = "Hồ Chí Minh"
                        },
                        new
                        {
                            Id = 2,
                            LocationName = "Đà Nẵng"
                        },
                        new
                        {
                            Id = 3,
                            LocationName = "Hà Nội"
                        });
                });

            modelBuilder.Entity("AssetManagement.Domain.Model.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConcurrencyStamp = "3ba0ea2f-312c-42cc-847a-4a451866cee0",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = 2,
                            ConcurrencyStamp = "6ba20a8f-719b-4949-9323-53c0c7443831",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("AssetManagement.Domain.Model.State", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("State", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Assigned",
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Available",
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Not available",
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Waiting for recycling",
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 5,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Recycled",
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("AssetManagement.Domain.Model.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Gender")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDisabled")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPasswordChanged")
                        .HasColumnType("bit");

                    b.Property<DateTime>("JoinedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LocationId")
                        .HasColumnType("int");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StaffCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6f29d189-35ee-4a38-9fa5-809c921443cd",
                            CreatedDate = new DateTime(2022, 8, 4, 23, 6, 38, 988, DateTimeKind.Local).AddTicks(603),
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmailConfirmed = false,
                            FirstName = "Nghia",
                            Gender = false,
                            IsDisabled = false,
                            IsPasswordChanged = false,
                            JoinedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Dinh Trong",
                            LocationId = 1,
                            LockoutEnabled = false,
                            NormalizedUserName = "ADMINHCM",
                            PasswordHash = "AQAAAAEAACcQAAAAEKMlYr5JVz39Z86zfICMXY9+MIAmwzKWInH7G+vcfsvmsHnsaoNG0QU0FvcBkbCmGQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ad2077d0-6aa5-48de-9eed-8f6615721a05",
                            StaffCode = "SD0001",
                            TwoFactorEnabled = false,
                            UpdatedDate = new DateTime(2022, 8, 4, 23, 6, 38, 988, DateTimeKind.Local).AddTicks(616),
                            UserName = "AdminHCM"
                        },
                        new
                        {
                            Id = 2,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0070ac27-3760-4f8b-8869-45634da4121b",
                            CreatedDate = new DateTime(2022, 8, 4, 23, 6, 38, 988, DateTimeKind.Local).AddTicks(629),
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmailConfirmed = false,
                            FirstName = "Thanh",
                            Gender = false,
                            IsDisabled = false,
                            IsPasswordChanged = false,
                            JoinedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Mai Quoc",
                            LocationId = 2,
                            LockoutEnabled = false,
                            NormalizedUserName = "ADMINDN",
                            PasswordHash = "AQAAAAEAACcQAAAAEPg4jg9jeqaMQNGEJh3G+qbB2klhe5wS3eQII24TG2uqV60xdO8cvErFCsXCm50FJg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c0314a3e-1709-4e62-bf52-02c4db7861ce",
                            StaffCode = "SD0002",
                            TwoFactorEnabled = false,
                            UpdatedDate = new DateTime(2022, 8, 4, 23, 6, 38, 988, DateTimeKind.Local).AddTicks(630),
                            UserName = "AdminDN"
                        },
                        new
                        {
                            Id = 3,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e1c0fed1-62a4-44ca-9d99-897717a073a3",
                            CreatedDate = new DateTime(2022, 8, 4, 23, 6, 38, 988, DateTimeKind.Local).AddTicks(714),
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmailConfirmed = false,
                            FirstName = "Yen",
                            Gender = false,
                            IsDisabled = false,
                            IsPasswordChanged = false,
                            JoinedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Jennie",
                            LocationId = 3,
                            LockoutEnabled = false,
                            NormalizedUserName = "ADMINHN",
                            PasswordHash = "AQAAAAEAACcQAAAAELKPYAARiCR+uaVBid3/H1YXR3cDeUAyL0tb8odBwdFDyZzIf6bUJ9K2dWGDuoKtcg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6f1c4879-ea9f-4ec6-b722-4f7a25f64d81",
                            StaffCode = "SD0003",
                            TwoFactorEnabled = false,
                            UpdatedDate = new DateTime(2022, 8, 4, 23, 6, 38, 988, DateTimeKind.Local).AddTicks(715),
                            UserName = "AdminHN"
                        },
                        new
                        {
                            Id = 4,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "462d160d-4bdb-4be6-bd76-e1e1f96ad05f",
                            CreatedDate = new DateTime(2022, 8, 4, 23, 6, 38, 988, DateTimeKind.Local).AddTicks(728),
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmailConfirmed = false,
                            FirstName = "Bui Xuan",
                            Gender = false,
                            IsDisabled = false,
                            IsPasswordChanged = false,
                            JoinedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Vinh",
                            LocationId = 1,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAEL0Lp93/OnTlZTPIYZTr3DceY5TdxYzN+4knJ+eYWsAB2DH21EgI9wwkm9q7WstpOg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2e13aa7a-4c67-49a0-978d-c575bb4bd8aa",
                            StaffCode = "SD0004",
                            TwoFactorEnabled = false,
                            UpdatedDate = new DateTime(2022, 8, 4, 23, 6, 38, 988, DateTimeKind.Local).AddTicks(729),
                            UserName = "vinhbx"
                        },
                        new
                        {
                            Id = 5,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0440fae2-e692-46b0-bfbf-bc94b433be6f",
                            CreatedDate = new DateTime(2022, 8, 4, 23, 6, 38, 988, DateTimeKind.Local).AddTicks(740),
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmailConfirmed = false,
                            FirstName = "Huong Khon",
                            Gender = false,
                            IsDisabled = false,
                            IsPasswordChanged = false,
                            JoinedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Vu",
                            LocationId = 2,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAEP9pNIx5ZgoKU636c8vF7QtH1E0LhADSgomEllOKIA3JpJr2sBp3/bpWjNvgiwh8gQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ae8a3076-81d4-40e0-b99e-fe39def13b99",
                            StaffCode = "SD0005",
                            TwoFactorEnabled = false,
                            UpdatedDate = new DateTime(2022, 8, 4, 23, 6, 38, 988, DateTimeKind.Local).AddTicks(741),
                            UserName = "vuhk"
                        },
                        new
                        {
                            Id = 6,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "72d5fb2d-d844-4e69-ae99-149ed265703a",
                            CreatedDate = new DateTime(2022, 8, 4, 23, 6, 38, 988, DateTimeKind.Local).AddTicks(752),
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmailConfirmed = false,
                            FirstName = "Hau Diem",
                            Gender = false,
                            IsDisabled = false,
                            IsPasswordChanged = false,
                            JoinedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Xuan",
                            LocationId = 1,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAEFzvA17aFqPGLEukZ6kdR1S2TvnvpIdpzxbRcgPigE5s28ISof64o+odsZc0UMhrug==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "82f9b40d-44ed-4275-a049-f30f93bbcc89",
                            StaffCode = "SD0006",
                            TwoFactorEnabled = false,
                            UpdatedDate = new DateTime(2022, 8, 4, 23, 6, 38, 988, DateTimeKind.Local).AddTicks(753),
                            UserName = "xuanhd"
                        },
                        new
                        {
                            Id = 7,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "acebf032-e260-4402-ba88-d641bb7ee9d4",
                            CreatedDate = new DateTime(2022, 8, 4, 23, 6, 38, 988, DateTimeKind.Local).AddTicks(771),
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmailConfirmed = false,
                            FirstName = "Luu Huyen",
                            Gender = false,
                            IsDisabled = false,
                            IsPasswordChanged = false,
                            JoinedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Duc",
                            LocationId = 2,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAEESk6+zmcuBACtCDxjIFMB9X4bEab1OC7+z29H/VpANPFcdFtuWmAeHwaOE9yNp+xQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "bbf768a7-c4c7-4401-b085-6bb13fd09d42",
                            StaffCode = "SD0007",
                            TwoFactorEnabled = false,
                            UpdatedDate = new DateTime(2022, 8, 4, 23, 6, 38, 988, DateTimeKind.Local).AddTicks(772),
                            UserName = "duclh"
                        },
                        new
                        {
                            Id = 8,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b9a8b745-7794-4da1-b633-659364de2d33",
                            CreatedDate = new DateTime(2022, 8, 4, 23, 6, 38, 992, DateTimeKind.Local).AddTicks(103),
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmailConfirmed = false,
                            FirstName = "Quang Van",
                            Gender = false,
                            IsDisabled = false,
                            IsPasswordChanged = false,
                            JoinedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Truong",
                            LocationId = 1,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAEJn4vOgOAZB7R634q88fbpBoXbMVwEQVzFVrzR6OhpqhXVmRRjaH2IwRzHXyYObhHQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e87fc255-17a8-4ae5-8023-9412672064c0",
                            StaffCode = "SD0008",
                            TwoFactorEnabled = false,
                            UpdatedDate = new DateTime(2022, 8, 4, 23, 6, 38, 992, DateTimeKind.Local).AddTicks(120),
                            UserName = "truongqv"
                        },
                        new
                        {
                            Id = 9,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6d5181a7-7d1c-4f0a-9652-35c2152cba69",
                            CreatedDate = new DateTime(2022, 8, 4, 23, 6, 38, 995, DateTimeKind.Local).AddTicks(7493),
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmailConfirmed = false,
                            FirstName = "Trieu Tu",
                            Gender = false,
                            IsDisabled = false,
                            IsPasswordChanged = false,
                            JoinedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Long",
                            LocationId = 3,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAEAvbjFozlvtAqe2SjphlY4E+J0+Uxzv1ptLYBDFVvxQvQCB6+rv/m6XEs0kobO0KYA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ddbd1e41-d0f5-4b5f-a9ce-2d349354321e",
                            StaffCode = "SD0009",
                            TwoFactorEnabled = false,
                            UpdatedDate = new DateTime(2022, 8, 4, 23, 6, 38, 995, DateTimeKind.Local).AddTicks(7511),
                            UserName = "longtt"
                        },
                        new
                        {
                            Id = 10,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "fc71fe95-0fed-454e-9c7a-3ff18825aec0",
                            CreatedDate = new DateTime(2022, 8, 4, 23, 6, 38, 999, DateTimeKind.Local).AddTicks(5606),
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmailConfirmed = false,
                            FirstName = "Gia Cat",
                            Gender = false,
                            IsDisabled = false,
                            IsPasswordChanged = false,
                            JoinedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Luong",
                            LocationId = 1,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAEPlF8pgF6gSUWqaq87nK8c6mcTNK0u/Uf2eIoJlCd8tsc/yiR0k4lB1jzG55fsVA5Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "052f67ea-9931-4113-82e8-c3ee3729bbdd",
                            StaffCode = "SD0010",
                            TwoFactorEnabled = false,
                            UpdatedDate = new DateTime(2022, 8, 4, 23, 6, 38, 999, DateTimeKind.Local).AddTicks(5620),
                            UserName = "luonggc"
                        },
                        new
                        {
                            Id = 11,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "65af93f1-a9a2-46f1-b5aa-c39dd755f4a1",
                            CreatedDate = new DateTime(2022, 8, 4, 23, 6, 39, 2, DateTimeKind.Local).AddTicks(3671),
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmailConfirmed = false,
                            Gender = false,
                            IsDisabled = true,
                            IsPasswordChanged = false,
                            JoinedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LocationId = 1,
                            LockoutEnabled = false,
                            NormalizedUserName = "ADMINDISABLE",
                            PasswordHash = "AQAAAAEAACcQAAAAEDcngQVdSgzIKyuP+I9RPz2QOqOYUMy1+qlIQ+w0NMIVfEbB88qhv1AuxQavKs2b7Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "fe6ddc45-70a8-4fb8-81d7-bf46e945d4ae",
                            StaffCode = "SD0011",
                            TwoFactorEnabled = false,
                            UpdatedDate = new DateTime(2022, 8, 4, 23, 6, 39, 2, DateTimeKind.Local).AddTicks(3686),
                            UserName = "AdminDisable"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 2,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 3,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 4,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 5,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 6,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 7,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 8,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 9,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 10,
                            RoleId = 2
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens", (string)null);
                });

            modelBuilder.Entity("AssetManagement.Domain.Model.Asset", b =>
                {
                    b.HasOne("AssetManagement.Domain.Model.Category", "Category")
                        .WithMany("Assets")
                        .HasForeignKey("CategoryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AssetManagement.Domain.Model.Location", "Location")
                        .WithMany("Assets")
                        .HasForeignKey("LocationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AssetManagement.Domain.Model.State", "State")
                        .WithMany("Assets")
                        .HasForeignKey("StateID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Location");

                    b.Navigation("State");
                });

            modelBuilder.Entity("AssetManagement.Domain.Model.Assignment", b =>
                {
                    b.HasOne("AssetManagement.Domain.Model.Asset", "Asset")
                        .WithMany("Assignments")
                        .HasForeignKey("AssetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AssetManagement.Domain.Model.User", "User")
                        .WithMany("Assignments")
                        .HasForeignKey("UserId");

                    b.Navigation("Asset");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AssetManagement.Domain.Model.User", b =>
                {
                    b.HasOne("AssetManagement.Domain.Model.Location", "Location")
                        .WithMany("Users")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Location");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("AssetManagement.Domain.Model.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("AssetManagement.Domain.Model.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("AssetManagement.Domain.Model.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("AssetManagement.Domain.Model.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AssetManagement.Domain.Model.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("AssetManagement.Domain.Model.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AssetManagement.Domain.Model.Asset", b =>
                {
                    b.Navigation("Assignments");
                });

            modelBuilder.Entity("AssetManagement.Domain.Model.Category", b =>
                {
                    b.Navigation("Assets");
                });

            modelBuilder.Entity("AssetManagement.Domain.Model.Location", b =>
                {
                    b.Navigation("Assets");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("AssetManagement.Domain.Model.State", b =>
                {
                    b.Navigation("Assets");
                });

            modelBuilder.Entity("AssetManagement.Domain.Model.User", b =>
                {
                    b.Navigation("Assignments");
                });
#pragma warning restore 612, 618
        }
    }
}
